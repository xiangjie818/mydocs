<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ClickHouse</title>
    <link href="/mydocs/2024/08/14/db-clickhouse/"/>
    <url>/mydocs/2024/08/14/db-clickhouse/</url>
    
    <content type="html"><![CDATA[<p>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。</p><span id="more"></span><h2 id="安装ClickHouse"><a href="#安装ClickHouse" class="headerlink" title="安装ClickHouse"></a>安装ClickHouse</h2><ol><li>安装clickhouse和clickhouse-client<br>CentOS、RedHat和所有其他基于rpm的Linux发行版可以直接使用rpm包安装ClickHouse。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加仓库</span><br>$ yum-config-manager --add-repo https://packages.clickhouse.com/rpm/clickhouse.repo<br>$ yum -y install clickhouse-server clickhouse-client<br></code></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl start clickhouse-server &amp;&amp; systemctl <span class="hljs-built_in">enable</span> clickhouse-server<br></code></pre></td></tr></table></figure></li></ol><h2 id="配置ClickHouse"><a href="#配置ClickHouse" class="headerlink" title="配置ClickHouse"></a>配置ClickHouse</h2><ol><li>修改监听端口<br>配置文件<code>/etc/clickhouse-server/config.xml</code>, 修改<code>listen_host</code>为<code>0.0.0.0</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listen_host</span>&gt;</span>0.0.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">listen_host</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>修改用户密码<br>配置文件<code>/etc/clickhouse-server/users.xml</code>, 修改<code>password</code>为<code>123456</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>重启服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl restart clickhouse-server<br></code></pre></td></tr></table></figure></li></ol><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>使用clickhouse-client连接服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果设置了密码，会提示输入密码</span><br>$ clickhouse-client<br></code></pre></td></tr></table></figure><p>也可以使用命令行参数<code>--password</code>指定密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clickhouse-client --password 123456<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Clickhouse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>数据库</tag>
      
      <tag>clickhouse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置CephFS文件存储</title>
    <link href="/mydocs/2024/08/13/ceph-operate-cephfs/"/>
    <url>/mydocs/2024/08/13/ceph-operate-cephfs/</url>
    
    <content type="html"><![CDATA[<p>CephFS 是 Ceph 集群的一个文件系统，可以挂载到 Linux 系统上，也可以挂载到 Windows 系统上。CephFS 可以实现跨节点的读写，并且可以保证数据的一致性。CephFS 可以实现跨节点的读写，并且可以保证数据的一致性。</p><span id="more"></span><p>配置步骤如下：</p><h2 id="创建pool"><a href="#创建pool" class="headerlink" title="创建pool"></a>创建pool</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd pool create cephfs_data 64 64<br>$ ceph osd pool create cephfs_metadata 64 64<br></code></pre></td></tr></table></figure><h2 id="创建文件存储"><a href="#创建文件存储" class="headerlink" title="创建文件存储"></a>创建文件存储</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph fs new cephfs cephfs_metadata cephfs_data<br></code></pre></td></tr></table></figure><h2 id="查看文件存储"><a href="#查看文件存储" class="headerlink" title="查看文件存储"></a>查看文件存储</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> ceph fs <span class="hljs-built_in">ls</span><br>name: cephfs, metadata pool: cephfs_metadata, <span class="hljs-keyword">data</span> pools: [<span class="hljs-type">cephfs_data</span>]<br></code></pre></td></tr></table></figure><h2 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">ceph</span> <span class="hljs-string">auth</span> <span class="hljs-built_in">get-or-create</span> <span class="hljs-string">client</span>.<span class="hljs-string">webchat</span> <span class="hljs-string">mon</span> <span class="hljs-string">&#x27;allow *&#x27;</span> <span class="hljs-string">mds</span> <span class="hljs-string">&#x27;allow r,allow rw path=/webchat&#x27;</span> <span class="hljs-string">osd</span> <span class="hljs-string">&#x27;allow rw pool=cephfs_data&#x27;</span><br>或<br><span class="hljs-string">ceph</span> <span class="hljs-string">fs</span> <span class="hljs-string">authorize</span> <span class="hljs-string">cephfs</span> <span class="hljs-string">client</span>.<span class="hljs-string">hisdata</span> /<span class="hljs-string">hisdata_db</span>  <span class="hljs-string">rw</span><br></code></pre></td></tr></table></figure><h2 id="挂载文件存储"><a href="#挂载文件存储" class="headerlink" title="挂载文件存储"></a>挂载文件存储</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/cephfs</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">mount -t ceph 192.168.1.21:6789:/ /mnt/cephfs -o name=admin,secret=AQBs06Fc6XIRFhAAgwu1aLZ/a/VUQKFWRDcVAg==</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>secret 可以使用命令<code>ceph auth get client.admin</code>进行查询</p>          </div><h2 id="使用ceph-fuse进行挂载"><a href="#使用ceph-fuse进行挂载" class="headerlink" title="使用ceph-fuse进行挂载"></a>使用ceph-fuse进行挂载</h2><p>使用ceph-fuse需要在客户端创建&#x2F;etc&#x2F;ceph&#x2F;目录，并把集群的密钥拷贝到此目录下</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>mkdir /etc/ceph<br><span class="hljs-variable">$ </span>scp <span class="hljs-number">192.168</span>.<span class="hljs-number">1.21</span><span class="hljs-symbol">:/etc/ceph/*</span> /etc/ceph/<br><span class="hljs-variable">$ </span>ceph-fuse -m <span class="hljs-number">192.168</span>.<span class="hljs-number">1.21</span><span class="hljs-symbol">:</span><span class="hljs-number">6789</span> /mnt/cephfs<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>Ceph</category>
      
      <category>运维管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>ceph</tag>
      
      <tag>linux</tag>
      
      <tag>cephfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宜信运维</title>
    <link href="/mydocs/2024/08/12/yixin-pso/"/>
    <url>/mydocs/2024/08/12/yixin-pso/</url>
    
    <content type="html"><![CDATA[<h2 id="生产环境网络"><a href="#生产环境网络" class="headerlink" title="生产环境网络"></a>生产环境网络</h2><table><thead><tr><th>网络地址</th><th>说明</th></tr></thead><tbody><tr><td>10.187.2.0&#x2F;24</td><td>呼叫中心</td></tr><tr><td>10.187.3.0&#x2F;24</td><td>MinIO集群</td></tr><tr><td>10.187.4.0&#x2F;24</td><td>Ceph集群</td></tr><tr><td>10.187.6.0&#x2F;24</td><td>CubeFS集群</td></tr><tr><td>172.18.7.0&#x2F;24</td><td>GlusterFS集群</td></tr><tr><td>172.18.8.0&#x2F;24</td><td>CubeFS集群</td></tr><tr><td>10.151.7.0&#x2F;24</td><td>NextCloud集群</td></tr><tr><td>10.183.11.0&#x2F;24</td><td>ELK集群</td></tr><tr><td>10.130.100.0&#x2F;24</td><td>GlusterFS集群</td></tr></tbody></table><h2 id="物理机初始信息"><a href="#物理机初始信息" class="headerlink" title="物理机初始信息"></a>物理机初始信息</h2><table><thead><tr><th>账号</th><th>密码</th></tr></thead><tbody><tr><td>root</td><td>CRed-%%%-12345</td></tr><tr><td>root</td><td>gyhYnhrtocjZ2lHc</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通过vector管理日志</title>
    <link href="/mydocs/2024/08/12/vector/"/>
    <url>/mydocs/2024/08/12/vector/</url>
    
    <content type="html"><![CDATA[<p>vector 是一个开源的日志收集工具，可以收集、聚合、转换、路由和发送日志到 Elasticsearch、Kafka、Splunk、Prometheus、Grafana、InfluxDB、Logstash、Syslog、Kinesis、CloudWatch 等。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>下载安装包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget https://packages.timber.io/vector/0.40.0/vector-0.40.0-x86_64-unknown-linux-gnu.tar.gz<br></code></pre></td></tr></table></figure>也可以直接到vector官网下载，然后将下载的二进制上传到服务器。</li><li>解压安装包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -xvf vector-0.40.0-x86_64-unknown-linux-gnu.tar.gz<br>$ <span class="hljs-built_in">mv</span> vector-0.40.0-x86_64-unknown-linux-gnu /opt/vector<br></code></pre></td></tr></table></figure></li><li>创建systemd服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> &gt; /usr/lib/systemd/system/vector.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Vector - An observability pipelines tool</span><br><span class="hljs-string">Documentation=https://vector.dev/</span><br><span class="hljs-string">Wants=network-online.target</span><br><span class="hljs-string">After=network-online.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">LimitNOFILE=4000000</span><br><span class="hljs-string">LimitSTACK=10485760</span><br><span class="hljs-string">User=root</span><br><span class="hljs-string">ExecStartPre=/opt/vector/bin/vector validate --config-dir /opt/vector/config</span><br><span class="hljs-string">ExecStart=/opt/vector/bin/vector -t 10 --config-dir /opt/vector/config </span><br><span class="hljs-string">ExecReload=/opt/vector/bin/vector validate --config-dir /opt/vector/config</span><br><span class="hljs-string">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="hljs-string">Restart=always</span><br><span class="hljs-string">AmbientCapabilities=CAP_NET_BIND_SERVICE</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure></li><li>创建数据目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> -p /var/lib/vector<br></code></pre></td></tr></table></figure></li><li>创建配置文件<br>以下是一个vector配置文件示例，其中包含一个kafka源，一个remap转换，一个clickhouse输出。配置文件路径为<code>/opt/vector/config/vector.yaml</code>。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sources:</span><br>  <span class="hljs-attr">paas_nginx_kafka:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">kafka</span><br>    <span class="hljs-attr">bootstrap_servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.33</span><span class="hljs-number">.208</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">group_id:</span> <span class="hljs-string">&quot;nginx_logs_vector&quot;</span><br>    <span class="hljs-attr">topics:</span> [<span class="hljs-string">&quot;nginx_logs&quot;</span>]<br> <br>    <span class="hljs-attr">commit_interval_ms:</span> <span class="hljs-number">5000</span><br>    <span class="hljs-attr">drain_timeout_ms:</span> <span class="hljs-number">2500</span><br>    <span class="hljs-attr">fetch_wait_max_ms:</span> <span class="hljs-number">100</span><br>    <span class="hljs-attr">session_timeout_ms:</span> <span class="hljs-number">10000</span><br>    <span class="hljs-attr">socket_timeout_ms:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">auto_offset_reset:</span> <span class="hljs-string">&quot;latest&quot;</span><br>    <span class="hljs-attr">librdkafka_options:</span><br>      <span class="hljs-attr">&quot;enable.auto.commit&quot;:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">&quot;fetch.message.max.bytes&quot;:</span> <span class="hljs-string">&quot;10485760&quot;</span><br>      <span class="hljs-attr">&quot;queue.buffering.max.ms&quot;:</span> <span class="hljs-string">&quot;5&quot;</span><br>      <span class="hljs-attr">&quot;batch.num.messages&quot;:</span> <span class="hljs-string">&quot;100000&quot;</span><br>      <span class="hljs-attr">&quot;session.timeout.ms&quot;:</span> <span class="hljs-string">&quot;30000&quot;</span><br>      <span class="hljs-attr">&quot;socket.timeout.ms&quot;:</span> <span class="hljs-string">&quot;60000&quot;</span><br> <br><span class="hljs-attr">transforms:</span><br>  <span class="hljs-attr">paas_nginx_log:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">remap</span><br>    <span class="hljs-attr">inputs:</span> [<span class="hljs-string">&quot;paas_nginx_kafka&quot;</span>]<br>    <span class="hljs-attr">drop_on_error:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      # 尝试解析 message 字段中的 JSON 字符串，由于解析kafka时，kafka的全部信息都是在message字段中，而kafka的每行记录中，日志信息包含在message中，因此需要解析2次message</span><br><span class="hljs-string">      . = parse_json!(.message)</span><br><span class="hljs-string">      .message = parse_json!(.message)</span><br><span class="hljs-string">      ., err = merge(., .message)</span><br><span class="hljs-string"></span><br>      <span class="hljs-comment"># 数据类型转换</span><br>      <span class="hljs-string">.upstream_status</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.upstream_status</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.upstream_status)</span> &#125;<br>      <span class="hljs-string">.status</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.status</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.status)</span> &#125;<br>      <span class="hljs-string">.request_length</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.request_length</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.request_length)</span> &#125;<br>      <span class="hljs-string">.content_length</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.content_length</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.content_length)</span> &#125;<br>      <span class="hljs-string">.body_bytes_sent</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.body_bytes_sent</span> <span class="hljs-string">==</span>  <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.body_bytes_sent)</span> &#125;<br>      <span class="hljs-string">.size</span> <span class="hljs-string">=</span>  <span class="hljs-string">if</span> <span class="hljs-string">.size</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_int!(.size)</span> &#125;<br>      <span class="hljs-string">.request_time</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.request_time</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_float!(.request_time)</span> &#125;<br>      <span class="hljs-string">.upstream_response_time</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.upstream_response_time</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-string">else</span> &#123; <span class="hljs-string">to_float!(.upstream_response_time)</span> &#125;<br><br>      <span class="hljs-comment"># 通过request_uri生成request_path和request_arg</span><br>      <span class="hljs-string">if</span> <span class="hljs-string">contains(string!(.request_uri),</span> <span class="hljs-string">&quot;?&quot;</span><span class="hljs-string">)</span> &#123;<br>          <span class="hljs-string">.request_regex</span> <span class="hljs-string">=</span> <span class="hljs-string">parse_regex!(.request_uri</span>, <span class="hljs-string">r&#x27;^(?P&lt;request_path&gt;\/.*)\?(?P&lt;request_arg&gt;.*)$&#x27;)</span><br>      &#125; <span class="hljs-string">else</span> &#123;<br>          <span class="hljs-string">.request_regex</span> <span class="hljs-string">=</span> <span class="hljs-string">parse_regex!(.request_uri</span>, <span class="hljs-string">r&#x27;^(?P&lt;request_path&gt;\/.*)&#x27;)</span><br>          <span class="hljs-string">.request_regex.request_arg</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;&quot;</span><br>      &#125;<br>      <span class="hljs-string">.</span> <span class="hljs-string">=</span> <span class="hljs-string">merge(.,</span> <span class="hljs-string">.request_regex)</span><br><br>      <span class="hljs-comment"># 设置remote_addr 的值为客户端的真实IP，非 DDOS OR CDN 回源IP</span><br>      <span class="hljs-string">.remote_addr,</span> <span class="hljs-string">err</span> <span class="hljs-string">=</span> <span class="hljs-string">if</span> <span class="hljs-string">.http_x_forwarded_for</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;-&quot;</span> &#123;<br>        <span class="hljs-string">.remote_addr</span><br>      &#125; <span class="hljs-string">else</span> &#123;<br>        <span class="hljs-string">split(.http_x_forwarded_for</span>, <span class="hljs-string">&quot;,&quot;</span><span class="hljs-string">)</span>[<span class="hljs-number">0</span>]<br>      &#125;<br>      <span class="hljs-string">.timestamp</span> <span class="hljs-string">=</span> <span class="hljs-string">format_timestamp!(parse_timestamp!(del(.&quot;@timestamp&quot;),</span> <span class="hljs-string">&quot;%Y-%m-%dT%H:%M:%S%z&quot;</span><span class="hljs-string">),</span> <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span><span class="hljs-string">)</span><br><br>      <span class="hljs-string">del(.request_regex)</span><br>      <span class="hljs-string">del(.message)</span><br>      <span class="hljs-string">del(.body)</span><br><br><span class="hljs-attr">sinks:</span><br>  <span class="hljs-attr">sink_paas_nginx_ck:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">clickhouse</span><br>    <span class="hljs-attr">inputs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">paas_nginx_log</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">http://192.168.37.100:8123</span><br>    <span class="hljs-attr">table:</span> <span class="hljs-string">nginx_logs</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">skip_unknown_fields:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">auth:</span><br>      <span class="hljs-attr">user:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">c02b951eab585ce5735b5aabcd0e650887620caa04ed811edd2d7fa84590c137</span><br>      <span class="hljs-attr">strategy:</span> <span class="hljs-string">basic</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>使用clickhouse作为输出时，需要先创建一个clickhouse数据库和表，可以使用clickhouse-client工具创建。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> default.nginx_logs (`<span class="hljs-type">timestamp</span>` DateTime64,<br>                                 `application` String,<br>                                 `body_bytes_sent` Int32,<br>                                 `content_length` Int32,<br>                                 `host` String,<br>                                 `hostname` String,<br>                                 `http_cdn_src_ip` String,<br>                                 `http_cookie` String,<br>                                 `http_referrer` String,<br>                                 `http_user_agent` String,<br>                                 `http_x_forwarded_for` String,<br>                                 `log_ip` String,<br>                                 `pid` String,<br>                                 `remote_addr` String,<br>                                 `remote_user` String,<br>                                 `request` String,<br>                                 `request_arg` String,<br>                                 `request_body` String,<br>                                 `request_length` Int32,<br>                                 `request_method` String,<br>                                 `request_time` Float64,<br>                                 `request_uri` String,<br>                                 `scheme` String,<br>                                 `server_name` String,<br>                                 `status` Int32,<br>                                 `upstream_addr` String,<br>                                 `upstream_response_time` Float64,<br>                                 `upstream_status` Int32,<br>                                 `size` Int32) ENGINE <span class="hljs-operator">=</span> MergeTree<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-type">date</span>(<span class="hljs-type">TIMESTAMP</span>);<br></code></pre></td></tr></table></figure>          </div></li><li>启动vector服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl daemon-reload &amp;&amp; systemctl <span class="hljs-built_in">enable</span> vector &amp;&amp; systemctl start vector<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>日志管理</category>
      
      <category>vector</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>日志管理</tag>
      
      <tag>vector</tag>
      
      <tag>elk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul集群安装</title>
    <link href="/mydocs/2024/08/12/consul-install/"/>
    <url>/mydocs/2024/08/12/consul-install/</url>
    
    <content type="html"><![CDATA[<p>Consul是一个分布式服务发现和配置管理系统，由HashiCorp开发，由Go语言编写。Consul 提供服务发现、服务网格、流量管理和网络基础设施设备的自动更新。</p><span id="more"></span><h2 id="准备安装环境"><a href="#准备安装环境" class="headerlink" title="准备安装环境"></a>准备安装环境</h2><table><thead><tr><th align="center">IP</th><th align="center">Role</th></tr></thead><tbody><tr><td align="center">192.168.33.175</td><td align="center">Server</td></tr><tr><td align="center">192.168.33.176</td><td align="center">Server</td></tr><tr><td align="center">192.168.33.177</td><td align="center">Server</td></tr></tbody></table><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>下载地址<br><a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><h2 id="安装consul"><a href="#安装consul" class="headerlink" title="安装consul"></a>安装consul</h2><p>把下载的安装包上传到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ unzip consul_1.15.2_linux_amd64.zip<br>$ <span class="hljs-built_in">mv</span> consul /usr/local/bin/consul<br></code></pre></td></tr></table></figure><p>添加systemd 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=cubefs master<br>After=network.target<br><br>[Service]<br>Type=simple<br>User=root<br>ExecStart=/opt/consul/consul agent -server -bootstrap-expect=3  -data-dir=/opt/consul/data -node=cfs1 -<span class="hljs-built_in">bind</span>=192.168.33.175  -enable-script-checks=<span class="hljs-literal">true</span> -config-dir=/opt/consul/consul.d -ui -client=0.0.0.0 -retry-join=192.168.33.175<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>启动命令参数说明</p><ul><li>-server 节点为server节点</li><li>-bootstrap-expect 允许加入集群的节点个数</li><li>-data-dir 数据保存目录</li><li>-node 节点名称</li><li>-bind 监听的ip</li><li>-enable-script-checks 是否允许执行健康检查脚本</li><li>-config-dir 配置文件目录</li><li>-ui 启动Web UI</li><li>-client 允许访问的地址</li><li>-retry-join 允许加入集群的节点</li></ul>          </div><h2 id="启动consul"><a href="#启动consul" class="headerlink" title="启动consul"></a>启动consul</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl start consul &amp;&amp; systemctl <span class="hljs-built_in">enable</span> consul<br></code></pre></td></tr></table></figure><h2 id="节点加入集群"><a href="#节点加入集群" class="headerlink" title="节点加入集群"></a>节点加入集群</h2><p>节点启动后，通过 <code>consul join &lt;ip&gt;</code> 的方式，任意选集群内已知的一个节点即可，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ consul <span class="hljs-built_in">join</span> 192.168.33.175<br></code></pre></td></tr></table></figure><h2 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h2><p>使用 <code>consul members</code>查看集群成员状态，输出如下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Node         Address             Status  Type    Build   Protocol  DC   Partition  Segment<br>agent-one    192.168.33.175:8301  alive   server  1.15.2  2         dc1  default    &lt;all&gt;<br>agent-three  192.168.33.177:8301  alive   server  1.15.2  2         dc1  default    &lt;all&gt;<br>agent-two    192.168.33.176:8301  alive   server  1.15.2  2         dc1  default    &lt;all&gt;<br></code></pre></td></tr></table></figure><h2 id="注册服务示例"><a href="#注册服务示例" class="headerlink" title="注册服务示例"></a>注册服务示例</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cos">$ curl -<span class="hljs-keyword">X</span> PUT -<span class="hljs-keyword">d</span> \<br>&#x27;&#123;<br>  <span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-string">&quot;192.168.33.175&quot;</span>,<br>  <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;node_exporter&quot;</span>,<br>  <span class="hljs-string">&quot;Address&quot;</span>: <span class="hljs-string">&quot;192.168.33.175&quot;</span>,<br>  <span class="hljs-string">&quot;Port&quot;</span>: <span class="hljs-number">9100</span>,<br>  <span class="hljs-string">&quot;Check&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;HTTP&quot;</span>: <span class="hljs-string">&quot;http://192.168.33.175:9100/health&quot;</span>,<br>    <span class="hljs-string">&quot;Interval&quot;</span>: <span class="hljs-string">&quot;10s&quot;</span><br>  &#125;<br>&#125;&#x27; http:<span class="hljs-comment">//192.168.33.175:8500/v1/agent/service/register</span><br></code></pre></td></tr></table></figure><h2 id="Web-UI"><a href="#Web-UI" class="headerlink" title="Web UI"></a>Web UI</h2><p><a href="http://192.168.33.175:8500/ui/">http://192.168.33.175:8500/ui/</a><br><img src="/mydocs/img/consul_WebUI.png"></p>]]></content>
    
    
    <categories>
      
      <category>Consul</category>
      
      <category>安装部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>consul</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ceph集群容灾域调整</title>
    <link href="/mydocs/2024/08/12/ceph-operate-crush-manage/"/>
    <url>/mydocs/2024/08/12/ceph-operate-crush-manage/</url>
    
    <content type="html"><![CDATA[<p>默认配置下，Ceph集群的容灾域是host，对于节点比较多的集群，建议使用rack作为容灾域。以rack作为容灾域时，同一个rack内的节点全部故障时，Ceph集群仍然可以工作。</p><span id="more"></span><p>修改集群容灾域为rack，步骤如下：</p><ol><li><p>创建rack域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd crush add-bucket rack1 rack<br>$ ceph osd crush add-bucket rack2 rack<br>$ ceph osd crush add-bucket rack3 rack<br></code></pre></td></tr></table></figure></li><li><p>把三个新建的rack，加入default下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd crush move rack1 root=default<br>$ ceph osd crush move rack2 root=default<br>$ ceph osd crush move rack3 root=default<br></code></pre></td></tr></table></figure></li><li><p>把节点加入rack域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd crush move new-prod-ceph11 rack=rack1<br>$ ceph osd crush move new-prod-ceph12 rack=rack2<br>$ ceph osd crush move new-prod-ceph13 rack=rack3<br></code></pre></td></tr></table></figure></li><li><p>获取集群的map信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd getcrushmap -o monmap<br></code></pre></td></tr></table></figure></li><li><p>对map信息进行反编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crushtool -d monmap -o monmap.txt<br></code></pre></td></tr></table></figure></li><li><p>修改容灾域<br>把monmap.txt的rule配置中的<code>step chooseleaf firstn 0 type host</code>，替换为<code>step chooseleaf firstn 0 type rack</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim  monmap.txt<br>rule replicated_rule &#123;<br><span class="hljs-built_in">id</span> 0<br><span class="hljs-built_in">type</span> replicated<br>min_size 1<br>max_size 10<br>step take default<br>step chooseleaf firstn 0 <span class="hljs-built_in">type</span> rack<br>step emit<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编译生成系统能识别的map</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crushtool -c monmap.txt -o monmap_rack<br></code></pre></td></tr></table></figure></li><li><p>将map信息注入到集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd setcrushmap -i monmap_rack<br></code></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd crush rule dump<br>[<br>    &#123;<br>        <span class="hljs-string">&quot;rule_id&quot;</span>: 0,<br>        <span class="hljs-string">&quot;rule_name&quot;</span>: <span class="hljs-string">&quot;replicated_rule&quot;</span>,<br>        <span class="hljs-string">&quot;ruleset&quot;</span>: 0,<br>        <span class="hljs-string">&quot;type&quot;</span>: 1,<br>        <span class="hljs-string">&quot;min_size&quot;</span>: 1,<br>        <span class="hljs-string">&quot;max_size&quot;</span>: 10,<br>        <span class="hljs-string">&quot;steps&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;op&quot;</span>: <span class="hljs-string">&quot;take&quot;</span>,<br>                <span class="hljs-string">&quot;item&quot;</span>: -1,<br>                <span class="hljs-string">&quot;item_name&quot;</span>: <span class="hljs-string">&quot;default&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;op&quot;</span>: <span class="hljs-string">&quot;chooseleaf_firstn&quot;</span>,<br>                <span class="hljs-string">&quot;num&quot;</span>: 0,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;rack&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;op&quot;</span>: <span class="hljs-string">&quot;emit&quot;</span><br>            &#125;<br>        ]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>Ceph</category>
      
      <category>运维管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>ceph</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSD experiencing BlueFS Spillover</title>
    <link href="/mydocs/2024/08/12/ceph-troubleshooting-bluefs-spillover/"/>
    <url>/mydocs/2024/08/12/ceph-troubleshooting-bluefs-spillover/</url>
    
    <content type="html"><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>在对Ceph集群进行日常巡检时，使用<code>ceph -s</code>看到集群有以下状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph -s<br>cluster:<br>    <span class="hljs-built_in">id</span>:     ebf905bd-9ee2-4dfe-a85a-df11a062c4f4<br>    health: HEALTH_WARN<br>            1 OSD(s) experiencing BlueFS spillover<br></code></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在Ceph集群中，BlueFS是Ceph存储引擎中的一种存储后端，它负责管理数据块的存储和访问。BlueFS的 spillover 是指当数据块的大小超过磁盘容量时，BlueFS 会将数据块存储到其他磁盘上，而不是直接存储在当前磁盘上。这个状态一般是由于osd的db分区较小，导致db溢出。临时性的方案是对对应的osd的db分区进行压缩。根本性的方案是将db迁移到更大的分区。比较理想的db分区的大小为osd磁盘容量的4%。</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><h3 id="方案1：压缩osd的db分区"><a href="#方案1：压缩osd的db分区" class="headerlink" title="方案1：压缩osd的db分区"></a>方案1：压缩osd的db分区</h3><ol><li>获取出现db溢出的osd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph health detail<br>HEALTH_WARN 1 OSD(s) experiencing BlueFS spillover<br>[WRN] BLUEFS_SPILLOVER: 1 OSD(s) experiencing BlueFS spillover<br>     osd.69 spilled over 66 MiB metadata from <span class="hljs-string">&#x27;db&#x27;</span> device (71 GiB used of 93 GiB) to slow device<br></code></pre></td></tr></table></figure></li><li>获取osd对应的节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd find osd.69<br>&#123;<br>    <span class="hljs-string">&quot;osd&quot;</span>: 69,<br>    <span class="hljs-string">&quot;addrs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;addrvec&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;v2&quot;</span>,<br>                <span class="hljs-string">&quot;addr&quot;</span>: <span class="hljs-string">&quot;192.168.4.19:6820&quot;</span>,<br>                <span class="hljs-string">&quot;nonce&quot;</span>: 85132<br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>                <span class="hljs-string">&quot;addr&quot;</span>: <span class="hljs-string">&quot;192.168.4.19:6821&quot;</span>,<br>                <span class="hljs-string">&quot;nonce&quot;</span>: 85132<br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;osd_fsid&quot;</span>: <span class="hljs-string">&quot;d2fa632b-038b-4c53-b724-a8098d11a0bf&quot;</span>,<br>    <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;new-prod-ceph19&quot;</span>,<br>    <span class="hljs-string">&quot;crush_location&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;new-prod-ceph19&quot;</span>,<br>        <span class="hljs-string">&quot;rack&quot;</span>: <span class="hljs-string">&quot;rack3&quot;</span>,<br>        <span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-string">&quot;default&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>压缩db数据<br>此操作只能在osd对应的节点上进行，需要先ssh到对应的节点，然后执行以下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph daemon osd.69 compact<br></code></pre></td></tr></table></figure></li></ol><h3 id="方案2：将db迁移到更大的分区"><a href="#方案2：将db迁移到更大的分区" class="headerlink" title="方案2：将db迁移到更大的分区"></a>方案2：将db迁移到更大的分区</h3><p>当物理节点没有足够的硬盘槽位时，需要将osd对应的节点的osd全部踢出，然后更换ssd后重新将节点添加回来</p><ol><li>关闭集群数据均衡<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd <span class="hljs-built_in">set</span> noout<br>$ ceph osd <span class="hljs-built_in">set</span> norecover<br>$ ceph osd <span class="hljs-built_in">set</span> nobackfill<br>$ ceph osd <span class="hljs-built_in">set</span> norebalance<br></code></pre></td></tr></table></figure></li><li>踢出osd<br>这里以上面的osd.69所在的节点new-prod-ceph19为例，执行以下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 停止OSD进程</span><br>$ <span class="hljs-keyword">for</span> osd <span class="hljs-keyword">in</span> `ceph osd ls-tree new-prod-ceph19`; <span class="hljs-keyword">do</span> systemctl stop ceph-osd@<span class="hljs-variable">$osd</span> ; <span class="hljs-keyword">done</span><br><span class="hljs-comment"># 踢出OSD</span><br>$ <span class="hljs-keyword">for</span> osd <span class="hljs-keyword">in</span> `ceph osd ls-tree new-prod-ceph19` ; <span class="hljs-keyword">do</span> ceph osd purge osd.<span class="hljs-variable">$osd</span> --yes-i-really-mean-it  ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li>更换ssd</li><li>重新添加osd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对所有数据盘进行初始化</span><br>$ <span class="hljs-keyword">for</span> disk <span class="hljs-keyword">in</span> sdb sdc sdd sde sdf sdg sdh sdi sdj sdk sdl sdm ; <span class="hljs-keyword">do</span> sgdisk -Z /dev/<span class="hljs-variable">$disk</span> ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>对新添加的SSD进行分区, 将ssd根据数据盘的数量等分为对应个数的分区，这里为了方便，这里直接使用脚本。脚本内容如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>dev=<span class="hljs-variable">$1</span><br>data_disk_num=<span class="hljs-variable">$2</span><br>total_size=$(lsblk -n -b /dev/<span class="hljs-variable">$dev</span> | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>)<br>per_partition_size=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$&#123;total_size&#125;</span> / <span class="hljs-variable">$&#123;data_disk_num&#125;</span> / 1024)<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 <span class="hljs-variable">$&#123;data_disk_num&#125;</span>) ; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;num&#125;</span> -ne <span class="hljs-variable">$&#123;data_disk_num&#125;</span> ] ; <span class="hljs-keyword">then</span><br>        sgdisk -n 0:0:+<span class="hljs-variable">$&#123;per_partition_size&#125;</span>KB /dev/<span class="hljs-variable">$&#123;dev&#125;</span><br>    <span class="hljs-keyword">else</span><br>        sgdisk -n 0:0:0 /dev/<span class="hljs-variable">$&#123;dev&#125;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>执行分区脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh parted_disk.sh sdl 10<br>$ sh parted_disk.sh sdm 10<br></code></pre></td></tr></table></figure>添加OSD，添加脚本保存在 192.168.4.11节点的&#x2F;root&#x2F;my-cluster&#x2F;history&#x2F;目录下，如无特殊情况，可以直接执行。 实际情况下根据创建集群时使用的添加osd方式再重新添加osd即可。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /root/my-cluster/ &amp;&amp; sh <span class="hljs-built_in">history</span>/create_osd_new_prod_ceph19.sh<br></code></pre></td></tr></table></figure></li><li>调整数据均衡速率<br>均衡速率通过<code>osd_max_backfills</code>参数控制，可以根据实际集群情况进行调整，这里设置为8以降低集群数据均衡的时间。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-keyword">for</span> osd <span class="hljs-keyword">in</span> `ceph osd ls-tree new-prod-ceph19`; <span class="hljs-keyword">do</span> ceph daemon osd.<span class="hljs-variable">$osd</span> config <span class="hljs-built_in">set</span> osd_max_backfills 8 ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li>恢复集群数据均衡<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph osd <span class="hljs-built_in">unset</span> noout<br>$ ceph osd <span class="hljs-built_in">unset</span> norecover<br>$ ceph osd <span class="hljs-built_in">unset</span> nobackfill<br>$ ceph osd <span class="hljs-built_in">unset</span> norebalance<br></code></pre></td></tr></table></figure></li></ol><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>验证方法为使用<code>ceph -s</code>查看集群状态，如果状态正常，则表示问题已解决。</p>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>Ceph</category>
      
      <category>故障处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>ceph</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ceph-deploy部署Ceph集群</title>
    <link href="/mydocs/2024/08/09/ceph-install-ceph-deploy/"/>
    <url>/mydocs/2024/08/09/ceph-install-ceph-deploy/</url>
    
    <content type="html"><![CDATA[<p>ceph-deploy是一个用来快速部署ceph集群的工具。不过并没有被积极的维护，目前对于新版本的ceph来说，已经被弃用了。而且ceph-deploy不支持CentOS8、RHEL8以及更新的操作系统。</p><span id="more"></span><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><table><thead><tr><th align="center">组件</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">ceph-deploy</td><td align="center">2.0.1</td></tr><tr><td align="center">ceph</td><td align="center">Octopus(15.2.16)</td></tr><tr><td align="center">system release</td><td align="center">CentOS 7.6</td></tr></tbody></table><h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><p>这里使用的公网的阿里云的yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/yum.repos.d/ceph.repo <br>[ceph_noarch]<br>name=ceph_noarch<br>baseurl=https://repo.huaweicloud.com/ceph/rpm-15.2.16/el7/noarch/<br>enabled=1<br>gpgcheck=0<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc<br><br>[ceph_x86_64]<br>name=ceph_x86_64<br>baseurl=https://repo.huaweicloud.com/ceph/rpm-15.2.16/el7/x86_64/<br>enabled=1<br>gpgcheck=0<br>gpgkey=http://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc<br></code></pre></td></tr></table></figure><p>如果需要使用代理访问公网，可以直接在&#x2F;etc&#x2F;yum.conf中添加proxy配置，格式为<code>proxy=http://server:port</code></p><h2 id="安装ceph-deploy"><a href="#安装ceph-deploy" class="headerlink" title="安装ceph-deploy"></a>安装ceph-deploy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum -y install ceph-deploy<br></code></pre></td></tr></table></figure><h2 id="开始部署ceph集群"><a href="#开始部署ceph集群" class="headerlink" title="开始部署ceph集群"></a>开始部署ceph集群</h2><h3 id="创建配置保存目录"><a href="#创建配置保存目录" class="headerlink" title="创建配置保存目录"></a>创建配置保存目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> cluster &amp;&amp; <span class="hljs-built_in">cd</span> cluster<br></code></pre></td></tr></table></figure><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy new node1 node2 node3<br></code></pre></td></tr></table></figure><h3 id="修改配置文件，添加网络配置"><a href="#修改配置文件，添加网络配置" class="headerlink" title="修改配置文件，添加网络配置"></a>修改配置文件，添加网络配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ceph.conf<br>[global]<br>fsid = dc590171-99c4-407d-9011-1966304da306<br>mon_initial_members = node1, node2, node3<br>mon_host = 172.16.0.11,172.16.0.12,172.16.0.13<br>auth_cluster_required = cephx<br>auth_service_required = cephx<br>auth_client_required = cephx<br>public_network = 172.16.0.0/24<br></code></pre></td></tr></table></figure><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy install node1 node2 node3 --mon --mgr --rgw --osd --local-mirror --nogpgcheck --no-adjust-repos<br></code></pre></td></tr></table></figure><h3 id="安装Monitor"><a href="#安装Monitor" class="headerlink" title="安装Monitor"></a>安装Monitor</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy mon create-initial<br>扩容新的monitor节点，可以使用命令<br>$ ceph-deploy --overwrite-conf mon add [Host]<br></code></pre></td></tr></table></figure><h3 id="分发配置文件"><a href="#分发配置文件" class="headerlink" title="分发配置文件"></a>分发配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy admin node1 node2 node3<br></code></pre></td></tr></table></figure><h3 id="添加OSD"><a href="#添加OSD" class="headerlink" title="添加OSD"></a>添加OSD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">批量添加所有节点的磁盘<br>$ <span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> node1 node2 node3 ; <span class="hljs-keyword">do</span> <span class="hljs-keyword">for</span> dev <span class="hljs-keyword">in</span> sdb sdc sdd sde sdf sdg sdh sdi sdj ; <span class="hljs-keyword">do</span> ceph-deploy osd create <span class="hljs-variable">$host</span>  --data /dev/<span class="hljs-variable">$dev</span> ;<span class="hljs-keyword">done</span>  ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="添加MGR"><a href="#添加MGR" class="headerlink" title="添加MGR"></a>添加MGR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy mgr create node1 node2 node3<br></code></pre></td></tr></table></figure><h3 id="添加RGW"><a href="#添加RGW" class="headerlink" title="添加RGW"></a>添加RGW</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ceph-deploy rgw create node1 node2 node3<br></code></pre></td></tr></table></figure><p>配置文件中添加rgw相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/ceph/ceph.conf<br>[global]<br>fsid = 59293392-e060-454c-b90c-a6341838d9ba<br>mon_initial_members = node1,node2,node3<br>mon_host = 172.16.0.11,172.16.0.12,172.16.0.13<br>auth_cluster_required = cephx<br>auth_service_required = cephx<br>auth_client_required = cephx<br><br>public_network = 172.16.0.0/24<br><br>[client.rgw.node1]<br>keyring = /var/lib/ceph/radosgw/ceph-rgw.node1/keyring<br><span class="hljs-built_in">log</span> file = /var/log/ceph/ceph-rgw-node1.<span class="hljs-built_in">log</span><br>rgw_frontends = beast port=7480<br>rgw thread pool size = 512<br><br>[client.rgw.node2]<br>keyring = /var/lib/ceph/radosgw/ceph-rgw.node2/keyring<br><span class="hljs-built_in">log</span> file = /var/log/ceph/ceph-rgw-node2.<span class="hljs-built_in">log</span><br>rgw_frontends = beast port=7480<br>rgw thread pool size = 512<br><br>[client.rgw.node3]<br>keyring = /var/lib/ceph/radosgw/ceph-rgw.node3/keyring<br><span class="hljs-built_in">log</span> file = /var/log/ceph/ceph-rgw-node3.<span class="hljs-built_in">log</span><br>rgw_frontends = beast port=7480<br>rgw thread pool size = 512<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>Ceph</category>
      
      <category>安装部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>ceph</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CubeFS安装部署</title>
    <link href="/mydocs/2024/08/09/cubefs-install/"/>
    <url>/mydocs/2024/08/09/cubefs-install/</url>
    
    <content type="html"><![CDATA[<p>CubeFS是新一代云原生存储产品，目前是云原生计算基金会（CNCF）托管的孵化阶段开源项目， 兼容S3、POSIX、HDFS等多种访问协议，支持多副本与纠删码两种存储引擎，为用户提供多租户、 多AZ部署以及跨区域复制等多种特性，广泛应用于大数据、AI、容器平台、数据库、中间件存算分离、数据共享以及数据保护等场景。</p><span id="more"></span><p>本文介绍如何使用Ansible部署CubeFS集群，目前仅支持副本模式的安装。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><table><thead><tr><th>IP</th><th>CPU</th><th>内存</th><th>硬盘</th></tr></thead><tbody><tr><td>192.168.0.1</td><td>40</td><td>128G</td><td>8T * 8</td></tr><tr><td>192.168.0.2</td><td>40</td><td>128G</td><td>8T * 8</td></tr><tr><td>192.168.0.3</td><td>40</td><td>128G</td><td>8T * 8</td></tr></tbody></table><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>下载ansible-cubefs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/xiangjie818/ansible-cubefs.git<br></code></pre></td></tr></table></figure><p>修改inventry文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[cubefs]<br>192.168.0.1 master=True meta=True data=True object=True<br>192.168.0.2 master=True meta=True data=True object=True<br>192.168.0.3 master=True meta=True data=True object=True<br><br>[consul]<br>192.168.0.1<br>192.168.0.2<br>192.168.0.3<br><br>[all:vars]<br>ansible_ssh_port=22<br></code></pre></td></tr></table></figure><p>修改group_vars&#x2F;all.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置CubeFS安装信息</span><br><span class="hljs-comment"># 这里填写CubeFS安装包名称和下载地址，根据实际情况进行调整</span><br><span class="hljs-attr">cubefs_package:</span> <span class="hljs-string">cubefs-3.3.1-linux-amd64.tar.gz</span><br><span class="hljs-attr">download_site:</span> <span class="hljs-string">http://s3.jishu.idc/spider-internal-read/cubefs/</span><br><span class="hljs-attr">cluster_name:</span> <span class="hljs-string">cubefs</span><br><span class="hljs-attr">cubefs_meta_memRatio:</span> <span class="hljs-number">75</span><br><span class="hljs-comment"># 配置Consul地址, 需要提前配置好consul集群，并配置域名, 安装文件和下载地址根据实际情况进行修改</span><br><span class="hljs-attr">consul_addr:</span> <span class="hljs-string">http://cfsconsul.paas.idc</span><br><span class="hljs-attr">consul_package:</span> <span class="hljs-string">consul_1.15.2_linux_amd64.tar.gz</span><br><span class="hljs-attr">consul_download_site:</span> <span class="hljs-string">http://s3.jishu.idc/spider-internal-read/consul</span><br><br><span class="hljs-attr">cubefs_master_host:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span><br><br><span class="hljs-comment"># 配置数据盘的挂载路径</span><br><span class="hljs-attr">mountmap:</span><br>  <span class="hljs-string">/dev/sdb:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data1</span><br>  <span class="hljs-string">/dev/sdc:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data2</span><br>  <span class="hljs-string">/dev/sdd:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data3</span><br>  <span class="hljs-string">/dev/sde:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data4</span><br>  <span class="hljs-string">/dev/sdf:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data5</span><br>  <span class="hljs-string">/dev/sdg:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data6</span><br>  <span class="hljs-string">/dev/sdh:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data7</span><br>  <span class="hljs-string">/dev/sdi:</span><br>    <span class="hljs-attr">directory:</span> <span class="hljs-string">/cfs/data8</span><br></code></pre></td></tr></table></figure><p>开始安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ansible-playbook cubefs.yaml -i hosts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>CubeFS</category>
      
      <category>安装部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>linux</tag>
      
      <tag>cubefs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Heketi管理GlusterFS集群</title>
    <link href="/mydocs/2024/08/09/glusterfs-heketi/"/>
    <url>/mydocs/2024/08/09/glusterfs-heketi/</url>
    
    <content type="html"><![CDATA[<p>Heketi是一个开源的分布式存储管理工具，它允许用户在多个节点上运行GlusterFS集群，并使用RESTful API管理存储资源。</p><span id="more"></span><h2 id="安装GlusterFS"><a href="#安装GlusterFS" class="headerlink" title="安装GlusterFS"></a>安装GlusterFS</h2><p>以下操作需要在所有的节点上执行</p><ol><li>安装glusterfs软件包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum -y install glusterfs glusterfs-server glusterfs-fuse glusterfs-rdma<br></code></pre></td></tr></table></figure></li><li>启动glusterfs服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl start glusterd &amp;&amp; systemctl <span class="hljs-built_in">enable</span> glusterd<br></code></pre></td></tr></table></figure></li></ol><h2 id="安装Heketi"><a href="#安装Heketi" class="headerlink" title="安装Heketi"></a>安装Heketi</h2><ol><li>使用yum安装heketi<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum -y install heketi heketi-client<br></code></pre></td></tr></table></figure>最新版本的heketi版本可以到github下载。项目地址: <a href="https://github.com/heketi/heketi.git">https://github.com/heketi/heketi.git</a></li><li>配置heketi<br>这里生成一个配置文件<code>/etc/heketi/heketi.json</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18080&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;use_auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_jwt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Private keys for access&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;jwt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Admin has access to all APIs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paasadminkey&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;User only has access to /volumes endpoint&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paasuserkey&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;glusterfs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;executor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ssh&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sshexec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;keyfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/heketi/heketi_key&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fstab&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/fstab&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;db&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/etc/heketi/heketi.db&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;loglevel&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;debug&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>创建key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -q -f /etc/heketi/heketi_key -N <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 拷贝key到其他节点</span><br>$ ssh-copy-id -i /etc/heketi/heketi_key.pub node1<br>$ ssh-copy-id -i /etc/heketi/heketi_key.pub node2<br>$ ssh-copy-id -i /etc/heketi/heketi_key.pub node3<br></code></pre></td></tr></table></figure></li><li>创建db文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> /etc/heketi/heketi.db<br><span class="hljs-comment"># 修改权限</span><br>$ <span class="hljs-built_in">chown</span> -R heketi:heketi /etc/heketi/*<br></code></pre></td></tr></table></figure></li><li>添加环境变量<br>在文件<code>/etc/profile</code>中添加环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> HEKETI_CLI_SERVER=http://172.16.0.11:18080<br><span class="hljs-built_in">export</span> HEKETI_CLI_KEY=paasadminkey<br><span class="hljs-built_in">export</span> HEKETI_CLI_USER=admin<br></code></pre></td></tr></table></figure>加载环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li><li>启动heketi<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ systemctl start heketi &amp;&amp; systemctl <span class="hljs-built_in">enable</span> heketi<br></code></pre></td></tr></table></figure></li></ol><h2 id="使用heketi管理GlusterFS集群"><a href="#使用heketi管理GlusterFS集群" class="headerlink" title="使用heketi管理GlusterFS集群"></a>使用heketi管理GlusterFS集群</h2><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli cluster create<br>Cluster <span class="hljs-built_in">id</span>: 2160d7fe0c438c8fbb53da7c82872f8f<br></code></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli node add --cluster 2160d7fe0c438c8fbb53da7c82872f8f --hostname 172.16.0.11 --zone=1<br>$ heketi-cli node add --cluster 2160d7fe0c438c8fbb53da7c82872f8f --hostname 172.16.0.12 --zone=2<br>$ heketi-cli node add --cluster 2160d7fe0c438c8fbb53da7c82872f8f --hostname 172.16.0.13 --zone=3<br></code></pre></td></tr></table></figure><h3 id="添加磁盘"><a href="#添加磁盘" class="headerlink" title="添加磁盘"></a>添加磁盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli device add --name=/dev/sde --node=4023ac3cadd0aa851ee28f39c4f56068<br>$ heketi-cli device add --name=/dev/sdf --node=4023ac3cadd0aa851ee28f39c4f56068<br>$ heketi-cli device add --name=/dev/sde --node=4133fa420529dd115ee7333a0b704e64<br>$ heketi-cli device add --name=/dev/sdf --node=4133fa420529dd115ee7333a0b704e64<br>$ heketi-cli device add --name=/dev/sde --node=fd1a9f1608884b51d9a9ff44c03ce4d2<br>$ heketi-cli device add --name=/dev/sdf --node=fd1a9f1608884b51d9a9ff44c03ce4d2<br></code></pre></td></tr></table></figure><h3 id="创建volume"><a href="#创建volume" class="headerlink" title="创建volume"></a>创建volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli volume create --name=<span class="hljs-built_in">test</span> --size=1 --replica=3<br></code></pre></td></tr></table></figure><h3 id="扩容volume"><a href="#扩容volume" class="headerlink" title="扩容volume"></a>扩容volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli volume <span class="hljs-built_in">expand</span> --<span class="hljs-built_in">id</span>=52decd5f6dd71c40ef967cf0f0f8f55d --size=1<br></code></pre></td></tr></table></figure><h3 id="获取集群的topology信息"><a href="#获取集群的topology信息" class="headerlink" title="获取集群的topology信息"></a>获取集群的topology信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ heketi-cli topology info --json &gt; /tmp/topology<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>由于频繁的获取topology会对heketi产生一定的压力，所以这里把查询的信息写入到文件，之后的操作直接读取保存的文件，避免频繁的访问heketi</p>          </div><h3 id="根据brickID查询volume名称"><a href="#根据brickID查询volume名称" class="headerlink" title="根据brickID查询volume名称"></a>根据brickID查询volume名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /tmp/topology  | jq -r <span class="hljs-string">&#x27;.clusters[0].volumes[] | select(.bricks[].id == &quot;52decd5f6dd71c40ef967cf0f0f8f55d&quot;)&#x27;</span> | jq .name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分布式存储</category>
      
      <category>GlusterFS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>storage</tag>
      
      <tag>linux</tag>
      
      <tag>glusterfs</tag>
      
      <tag>heketi</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
